<?php

/**
 * Class WidgetCollectionBehavior
 *
 * Stores a collection of widgets and manages them
 *
 * @package photo
 * @author raucher <myplace4spam@gmail.com>
 */
class WidgetCollectionBehavior extends CBehavior
{
    /**
     * @var array Storage for content generated by widgets
     */
    private $_widgets = array();

    /**
     * @var int Counter for widgets
     */
    static private $_counter = 0;

    /**
     * @var string Widget class name prefix
     */
    public $widgetPrefix = '';
    /**
     * @var string Widget class name suffix
     */
    public $widgetSuffix = '';
    /**
     * @var string Path of the widget class folder
     */
    public $widgetPath = 'application.widgets';

    /**
     * @return array List of avaliable widgets
     */
    public function getWidgets()
    {
        return $this->_widgets;
    }

    /**
     * Returns first widget which name matches the given parameter
     *
     * @param string $widgetName Name of the widget class
     * @return mixed Content generated by the widget or false if it isn't found
     */
    public function getWidget($widgetName)
    {
        foreach($this->_widgets as $widget)
        {
            if(key($widget) === $widgetName)
                return current($widget);
        }

        return false;
    }

    /**
     * @return bool Whether instance has widgets or not
     */
    public function hasWidgets()
    {
        return !empty($this->_widgets);
    }

    /**
     * @param string $widgetName Name of the widget class
     * @param array $params Parameters of the widget
     * @return mixed Content generated by the widget or false if the widget currently exists in array
     */
    private function _factory($widgetName, array $params = array()){

        $widget = sprintf('%s.%s%s%s',
            $this->widgetPath,
            ucfirst($this->widgetPrefix),
            ucfirst($widgetName),
            ucfirst($this->widgetSuffix)
        );
        return $this->owner->widget($widget, $params, true);
    }

    /**
     * @param string $widgetName Name of the widget class
     * @param array $params Parameters of the widget
     */
    public function addWidget($widgetName, array $params = array())
    {
        if($widget = $this->_factory($widgetName, $params))
            $this->_widgets[][$widgetName] = $widget;
    }

    /**
     * @param array $widgets Array of the widget class names
     */
    public function addWidgets(array $widgets)
    {
        foreach ($widgets as $widgetName)
        {
            $this->addWidget($widgetName);
        }
    }

    /**
     * Echoes content of the speciffic widget
     * @param string $widgetName name of the widget class
     */
    public function renderWidget($widgetName)
    {
        echo $this->getWidget($widgetName);
    }

    /**
     *  Echoes content of all avaliable widgets
     */
    public function renderWidgets()
    {
        foreach ($this->_widgets as $widget)
        {
            echo current($widget);
        }

    }
}